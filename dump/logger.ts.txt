import chalk from "chalk";

import { Configuration } from "../typings/Configuration.js";
import { watchConfig } from "./configUtils.js";

type Blessed = typeof import("blessed");
type BlessedContrib = typeof import("blessed-contrib");

interface BlessedLoggerOptions {
    blessed: Blessed;
    contrib: BlessedContrib;
}

export class BlessedLogger {
    private blessed
    private contrib

    public static instance: BlessedLogger;

    sessionBox!: InstanceType<Blessed["Widgets"]["BoxElement"]>;
    ordinaryBox!: InstanceType<Blessed["Widgets"]["BoxElement"]>;
    huntbotBox!: InstanceType<Blessed["Widgets"]["BoxElement"]>;
    latencyLine!: InstanceType<BlessedContrib["Widgets"]["LineElement"]>;
    farmLog!: InstanceType<BlessedContrib["Widgets"]["LogElement"]>;
    configBox!: InstanceType<Blessed["Widgets"]["BoxElement"]>;
    captchaBox!: InstanceType<Blessed["Widgets"]["BoxElement"]>;

    constructor({
        blessed,
        contrib,
    }: BlessedLoggerOptions) {
        this.blessed = blessed;
        this.contrib = contrib;

        this.render()
        // this.registerWatchConfig(config);
    }

    private render = () => {
        const screen = this.blessed.screen({
            smartCSR: true,
            title: "Advanced Discord OwO Tool Farm",
        })
        const grid = new this.contrib.grid({ rows: 15, cols: 15, screen });

        this.sessionBox = grid.set(0, 0, 7, 4, this.blessed.box, {
            label: "Session Status",
            fg: "green",
            padding: {
                left: 1,
            }
        })

        this.ordinaryBox = grid.set(7, 0, 3, 4, this.blessed.box, {
            label: "Hunt/Battle",
            fg: "green",
            padding: {
                left: 1,
            }
        })

        this.huntbotBox = grid.set(10, 0, 5, 4, this.blessed.box, {
            label: "Huntbot Status",
            fg: "green",
            padding: {
                left: 1,
            }
        })

        this.latencyLine = grid.set(0, 4, 7, 8, this.contrib.line, {
            label: "WS Latency",
            showLegend: true,
            legend: { width: 4 },
            minY: 0,
            wholeNumbersOnly: true,
        })

        this.farmLog = grid.set(7, 4, 8, 8, this.contrib.log, {
            label: "Console Log",
            fg: "white",
            padding: {
                left: 1,
            },
        })

        this.configBox = grid.set(0, 12, 10, 3, this.blessed.box, {
            label: "Configuration",
            fg: "green",
            padding: {
                left: 1,
            }
        })

        this.captchaBox = grid.set(10, 12, 5, 3, this.blessed.box, {
            label: "Captcha",
            fg: "green",
            padding: {
                left: 1,
            }
        })

        screen.on("resize", () => {
            this.sessionBox.emit("attach");
            this.ordinaryBox.emit("attach");
            this.huntbotBox.emit("attach");
            this.latencyLine.emit("attach");
            this.farmLog.emit("attach");
            this.configBox.emit("attach");
            this.captchaBox.emit("attach");
        })

        screen.key(["escape", "C-c"], () => {
            this.logDebug("Exiting blessed logger...");
            process.exit(0);
        });

        screen.render();
    }

    // private registerWatchConfig = (config: Configuration) => {
    //     return watchConfig(config, (key, oldValue, newValue) => {
    //         this.logDebug(`Config property changed: ${chalk.bold(key)} (${oldValue} -> ${newValue})`);
    //         this.configBox.setContent(
    //             Object.entries(config)
    //                 .map(([k, v]) => `${chalk.whiteBright(k)}: ${chalk.greenBright(v)}`)
    //                 .join("\n")
    //         );
    //     })
    // }

    public static getInstance = async () => {
        if (!BlessedLogger.instance) {
            const blessed = (await import("blessed")).default;
            const contrib = (await import("blessed-contrib")).default;

            BlessedLogger.instance = new BlessedLogger({
                blessed,
                contrib,
            });
        }
        return BlessedLogger.instance;
    }

    public log = (type: string, ...message: any[]) => {
        const time = new Date().toLocaleTimeString("en-US", {
            hour: "2-digit",
            minute: "2-digit",
            second: "2-digit",
        });

        this.farmLog.log(
            `${chalk.bgYellowBright(time)} ${chalk.whiteBright("[")}${type}${chalk.whiteBright("]")} ${message.join(" ")}`
        );
    }

    public logAlert = (message: string) => {
        this.log(chalk.redBright("ALERT"), message);
    }

    public logError = (message: string) => {
        this.log(chalk.yellowBright("ERROR"), message);
    }

    public logInfo = (message: string) => {
        this.log(chalk.cyanBright("INFO"), message);
    }

    public logSent = (message: string) => {
        this.log(chalk.greenBright("SENT"), message);
    }

    public logDebug = (message: string) => {
        this.log(chalk.gray("DEBUG"), message);
    }
}

export class LegacyLogger {
    private static instance: LegacyLogger;

    private constructor() {
    }

    public static getInstance = () => {
        if (!LegacyLogger.instance) {
            LegacyLogger.instance = new LegacyLogger();
        }
        return LegacyLogger.instance;
    }

    // private registerWatchConfig = (config: Configuration) => {
    //     return watchConfig(config, (key, oldValue, newValue) => {
    //         this.logDebug(`Config property changed: ${chalk.bold(key)} (${oldValue} -> ${newValue})`);
    //     });
    // }

    public static log = (type: string, message: string) => {
        const time = new Date().toLocaleTimeString("en-US", {
            hour: "2-digit",
            minute: "2-digit",
            second: "2-digit",
        });

        console.log(
            `${chalk.bgYellowBright(time)} ${chalk.whiteBright("[")}${type}${chalk.whiteBright("]")} ${message}`
        );
    }

    public logAlert = (message: string) => {
        LegacyLogger.log(chalk.redBright("ALERT"), message);
    }

    public logError = (message: string) => {
        LegacyLogger.log(chalk.yellowBright("ERROR"), message);
    }

    public logData = (message: string) => {
        LegacyLogger.log(chalk.magentaBright("DATA"), message);
    }

    public logInfo = (message: string) => {
        LegacyLogger.log(chalk.cyanBright("INFO"), message);
    }

    public logSent = (message: string) => {
        LegacyLogger.log(chalk.greenBright("SENT"), message);
    }

    public logDebug = (message: string) => {
        LegacyLogger.log(chalk.gray("DEBUG"), message);
    }
}

export const blessedLogger = BlessedLogger.getInstance.bind(BlessedLogger);
export const legacyLogger = LegacyLogger.getInstance.bind(LegacyLogger);